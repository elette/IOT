namespace IOT ;

use com.ibm.streams.db::* ;

composite Main
{
	param
		expression<rstring> $LogPath : "/work/bin/log/" ;
		//expression<rstring> $LogPath : "logs/" ;

	graph

		() as DeviceOut = FileSink(ParsedDeviceLog)
		{
			param
				file : "device.out" ;
				flush : 1u ;
				format : csv ;
				separator : "," ;
		}

		() as SensorOut = FileSink(ParsedSensorLog)
		{
			param
				file : "sensor.out" ;
				flush : 1u ;
				format : csv ;
				separator : "," ;
		}

		(stream<rstring LogLine> LogStream) as LogFile = FileSource()
		{
			param
				file : $LogPath + getTodayFile() + ".log" ;
				format : line ;
				hotFile : true ;
				ignoreOpenErrors : true ;
		}

		stream<logStreamSchema> LogLineSplit as O = Custom(LogStream as I)
		{
			logic
				state :
				{
					rstring HEADER = "<X>" ;
					rstring FOOTER = "</X>" ;
					rstring MATCH = "LG" ;
					mutable logStreamSchema Out ;
					mutable list<rstring> tempStr ;
					mutable sensorSchema tempSensor ;
				}

				onTuple I :
				{
				//if(findFirst(LogLine, HEADER) < 0 && findFirst(LogLine, FOOTER) < 0)
					if(findFirst(LogLine, MATCH) > - 1 && findFirst(LogLine, ":") == - 1)
					{
						appLog(Log.info, "test log..") ;
						println(">>>> logging..") ;
						tempStr = csvTokenize(LogLine) ;
						// DT
						Out.Device.DT = tempStr [ 0 ] ;
						// CARRIER
						Out.Device.CARRIER = tempStr [ 1 ] ;
						// STATUS
						Out.Device.STATUS = tempStr [ 2 ] ;
						// DEVICE_ID
						//Out.Device.DEVICE_ID = trim(tempStr[3], "'");
						Out.Device.DEVICE_ID = tempStr [ 3 ] ;
						// BATT
						Out.Device.BATT =(int32) strtoll(trim(tempStr [ 4 ], "'"), 16) ;
//						println("BATT : " +(rstring) strtoll(trim(tempStr [ 4 ], "'"), 16)) ;
						// EQUIP
						Out.Device.EQUIP = tempStr [ 5 ] ;
						tempStr = csvTokenize(trim(trim(regexMatch(LogLine, "\\[.+\\]") [ 0 ], "]"), "[")) ;
						Out.SensorList = tempStr ;
						println("size of [xxx] : " +(rstring) size(tempStr)) ;
						println(tempStr) ;
						//Out.Sensor = {(int32)tempStr[0], (int32)tempStr[1], (int32)tempStr[2], (int32)tempStr[3], (int32)tempStr[4], (int32)tempStr[5], (int32)tempStr[6], (int32)tempStr[7], (int32)tempStr[8], (int32)tempStr[9], (int32)tempStr[10], (int32)tempStr[11], (int32)tempStr[12]} ;

						/*
						Out.Sensor.MOVED = (int32)strtoll(tempStr[0], 0); 
						Out.Sensor.ONOFF = (int32)strtoll(tempStr[1], 0); 
						Out.Sensor.ACC_X = (int32)strtoll(tempStr[2], 0); 
						Out.Sensor.ACC_Y = (int32)strtoll(tempStr[3], 0); 
						Out.Sensor.ACC_Z = (int32)strtoll(tempStr[4], 0); 
						Out.Sensor.TEMP  = (int32)strtoll(tempStr[5], 0); 
						Out.Sensor.HUMID = (int32)strtoll(tempStr[6], 0); 
						Out.Sensor.CO2   = (int32)strtoll(tempStr[7], 0); 
						Out.Sensor.TVOC  = (int32)strtoll(tempStr[8], 0); 
						Out.Sensor.ILLUM = (int32)strtoll(tempStr[9], 0); 
						Out.Sensor.MAG_X = (int32)strtoll(tempStr[10], 0); 
						Out.Sensor.MAG_Y = (int32)strtoll(tempStr[11], 0); 
						Out.Sensor.MAG_Z = (int32)strtoll(tempStr[12], 0);
*/
						submit(Out, O) ;
						submit(Sys.WindowMarker, O) ;
					}

					/*
					else if (findFirst(LogLine, FOOTER) == 0)
					{
						submit(Sys.WindowMarker, O) ;
					}
*/
				}

		}

/*
 *  ; 
			stream<deviceLogSchema> ParsedBaseDeviceLog as B1 ; 
			stream<sensorLogSchema>	ParsedBaseSensorLog as B2
 */
		@view(name = "DeviceView", port = ParsedDeviceLog, sampleSize = 10,
			bufferSize = 100)
		@view(name = "SensorView", port = ParsedSensorLog, sampleSize = 10,
			bufferSize = 100)
		(stream<deviceLogSchema> ParsedDeviceLog as O1 ; 
			stream<sensorLogSchema>	ParsedSensorLog as O2 ; 
			stream<deviceLogSchema> ParsedBaseDeviceLog as B1 ; 
			stream<sensorLogSchema>	ParsedBaseSensorLog as B2) = Custom(LogLineSplit as I)
		{
			logic
				state :
				{
					mutable deviceLogSchema LogDevice ;
					mutable set<sensorLogSchema> SensoredSet ;
					mutable sensorLogSchema LogSensor ;
					mutable rstring strDT ;
					list<rstring> SensorID = [ "MOVED", "ONOFF", "ACC_X", "ACC_Y", "ACC_Z",
						"TEMP", "HUMID", "CO2", "TVOC", "ILLUM", "MAG_X", "MAG_Y", "MAG_Z" ] ;
				}

				onTuple I :
				{
					strDT = getDT(toTimestamp(Sys.YYYYMMDDhhmmss, Device.DT)) ;
					LogDevice.DT = strDT ;
					LogDevice.DEVICE_ID = Device.DEVICE_ID ;
					LogDevice.CARRIER = Device.CARRIER ;
					LogDevice.STATUS = Device.STATUS ;
					LogDevice.BATT = Device.BATT ;
					LogDevice.EQUIP = Device.EQUIP ;
					clearM(SensoredSet) ;
					LogSensor.DT = strDT ;
					LogSensor.DEVICE_ID = Device.DEVICE_ID ;
					for(int32 i in range(SensorID))
					{
						LogSensor.SENSOR_ID = SensorID [ i ] ;
						LogSensor.CUR_VALUE =(int32) strtoll(SensorList [ i ], 16) ;
						insertM(SensoredSet, LogSensor) ;
					}

					println(" Device: " +(rstring) LogDevice) ;
					println(" Set size: " +(rstring) size(SensoredSet)) ;
				}

				onPunct I :
				{
					println(">>>> Insert Device log..." +(rstring) LogDevice) ;
					submit(LogDevice, O1) ;
					if (LogDevice.STATUS == "88") submit(LogDevice, B1) ;
					for(sensorLogSchema s in SensoredSet)
					{
					//println(s);
						submit(s, O2) ;
						if (LogDevice.STATUS == "88") submit(s, B2) ;
					}

					println("< Submitted > ") ;
				}

		}

		() as LogDeviceInsert = ODBCAppend(ParsedDeviceLog)
		{
			param
				connectionDocument : "./etc/connections.xml" ;
				connection : "IOTConnection" ;
				access : "INSERT_DEVICE_LOG" ;
				commitOnPunctuation : true ;
		}

		() as LogSensorInsert = ODBCAppend(ParsedSensorLog)
		{
			param
				connectionDocument : "./etc/connections.xml" ;
				connection : "IOTConnection" ;
				access : "INSERT_SENSOR_LOG" ;
				commitOnPunctuation : true ;
		}

		// DEVICE_BASE
		stream<deviceLogSchema> BaseDeviceInsert = ODBCRun(ParsedBaseDeviceLog)
		{
			param
				connectionDocument : "./etc/connections.xml" ;
				connection : "IOTConnection" ;
				access : "BASE_DEVICE_LOG" ;
				commitOnPunctuation : true ;
				DEVICE_ID : DEVICE_ID;
				BATT : BATT;
				
		}

		// SENSOR_BASE
		stream<sensorLogSchema> BaseSensorInsert = ODBCRun(ParsedBaseSensorLog)
		{
			param
				connectionDocument : "./etc/connections.xml" ;
				connection : "IOTConnection" ;
				access : "BASE_SENSOR_LOG" ;
				commitOnPunctuation : true ;
				DEVICE_ID : DEVICE_ID;
				SENSOR_ID : SENSOR_ID;
				BASE_VALUE : CUR_VALUE;
		}


}

